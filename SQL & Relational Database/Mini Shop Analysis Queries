--PART 1:
--Task 1: How much data in the album products? 

SELECT count(*) FROM products;

--Find information about how many product have been ordered
--1. Find the product IDs and product names that have been ordered more than once, sorted by product ID
SELECT 
    p.product_id,
    p.product_name,
    COUNT(s.sales_id) AS total_order
FROM products p
JOIN sales s ON p.product_id = s.product_id 
GROUP BY p.product_id, p.product_name
HAVING COUNT(s.sales_id) > 1
ORDER BY p.product_id ASC;

--2. How many products have been ordered more than once?
--CTE:
WITH data AS(
	SELECT 
	    p.product_id,
	    p.product_name,
	    COUNT(s.sales_id) AS total_order
	FROM products p
	JOIN sales s ON p.product_id = s.product_id 
	GROUP BY p.product_id, p.product_name
	HAVING COUNT(s.sales_id) > 1
	ORDER BY p.product_id ASC
)
SELECT COUNT(product_id) FROM data

--SUBQUEY:
SELECT 
	COUNT(product_id) 
FROM
	(SELECT 
	    p.product_id,
	    p.product_name,
	    COUNT(s.sales_id) AS total_order
	FROM products p
	JOIN sales s ON p.product_id = s.product_id 
	GROUP BY p.product_id, p.product_name
	HAVING COUNT(s.sales_id) > 1
	ORDER BY p.product_id ASC)
	
-- 3. How many products have only been ordered once?
WITH data AS(
	SELECT 
	    p.product_id,
	    p.product_name,
	    COUNT(s.sales_id) AS total_order
	FROM products p
	JOIN sales s ON p.product_id = s.product_id 
	GROUP BY p.product_id, p.product_name
	HAVING COUNT(s.sales_id) = 1
	ORDER BY p.product_id ASC
)
SELECT COUNT(product_id) FROM data

--4 List customers who have placed orders more than twice in a single month
SELECT
    c.customer_id,
    c.customer_name,
    c.home_address,
    EXTRACT(YEAR FROM o.order_date::DATE) AS order_year,
    EXTRACT(MONTH FROM o.order_date::DATE) AS order_month,
    COUNT(o.order_id) AS total_orders,
    CASE
        WHEN COUNT(O.ORDER_ID) > 2 THEN TRUE
        ELSE FALSE
    END AS DISCOUNT
FROM customers c 
JOIN orders o ON c.customer_id = o.customer_id
GROUP BY 1, 2, 3, 4, 5
HAVING COUNT(o.order_id) > 2
ORDER BY 4 DESC, 5 DESC;

--5
WITH OrderDates AS (
    SELECT
        c.customer_id, 
        c.customer_name,
        o.order_date::DATE,
        FIRST_VALUE(o.order_date::DATE) OVER(PARTITION BY o.customer_id ORDER BY o.order_date::DATE ASC) AS first_order_date,
        LAST_VALUE(o.order_date::DATE) OVER(
            PARTITION BY o.customer_id 
            ORDER BY o.order_date::DATE ASC 
            ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING
        ) AS last_order_date
    FROM orders o
    JOIN customers c ON o.customer_id = c.customer_id
)
SELECT 
    customer_id, 
    customer_name,
    MIN(first_order_date) AS first_order_date, 
    MAX(last_order_date) AS last_order_date,
    CASE 
        WHEN MIN(first_order_date) = MAX(last_order_date) THEN TRUE
        ELSE FALSE
    END AS is_promotion    
FROM OrderDates
GROUP BY customer_id, customer_name
LIMIT 10;

--6 Top 5 customers who have spent the most amount of money on products within the “Trousers” category,
WITH customer_spent AS (
    SELECT
        c.customer_id,
        c.customer_name,
        SUM(s.quantity) AS quantity,
        SUM(s.total_price) AS total_amount
    FROM customers c 
    JOIN orders o ON c.customer_id = o.customer_id 
    JOIN sales s ON o.order_id = s.order_id
    JOIN products p ON s.product_id = p.product_id 
    WHERE p.product_type = 'Trousers'
    GROUP BY c.customer_id, c.customer_name
    ORDER BY total_amount desc
    limit 5
),
sales_trousers AS (
    SELECT
        SUM(s.quantity) AS total_qty,
        AVG(s.total_price) AS avg_amount
    FROM sales s
    JOIN products p ON s.product_id = p.product_id 
    WHERE p.product_type = 'Trousers'
)
SELECT 
    cs.customer_id,
    cs.customer_name,
    cs.quantity,
    cs.total_amount,
    st.total_qty,
    st.avg_amount
FROM customer_spent cs, sales_trousers st
LIMIT 5;


--7 Top-selling (Top 1) product for each month. You want to know the product with the highest total quantity sold in each month
WITH sales_summary AS (
    SELECT
        EXTRACT(YEAR FROM o.order_date::DATE) AS order_year,
        EXTRACT(MONTH FROM o.order_date::DATE) AS order_month,
        p.product_id,
        p.product_name,
        SUM(s.quantity) AS total_quantity
    FROM products p 
    JOIN sales s ON p.product_id = s.product_id 
    JOIN orders o ON s.order_id = o.order_id
    GROUP BY order_year, order_month, p.product_id, p.product_name
),
ranked_sales AS (
    SELECT 
        *,
        ROW_NUMBER() OVER (PARTITION BY order_year, order_month ORDER BY total_quantity DESC, product_id ASC) AS rn
    FROM sales_summary
)
SELECT 
    order_year,
    order_month,
    product_id,
    product_name,
    total_quantity
FROM ranked_sales 
WHERE rn = 1
ORDER BY order_year, order_month;



--8 Create VIEW monthly_total_payment
CREATE OR REPLACE VIEW monthly_total_payment AS
SELECT 
    EXTRACT(YEAR FROM o.order_date::DATE) AS sale_year,
    EXTRACT(MONTH FROM o.order_date::DATE) AS sale_month,
    SUM(o.payment) AS total_payment
FROM orders o
GROUP BY sale_year, sale_month
ORDER BY sale_year, sale_month;

-- Show monthly_total_payemnt
SELECT * FROM monthly_total_payment;


--PART2

--9 Warehousing Item
WITH total_space AS (
    -- Step 1: Define the total available warehouse space (600,000 sq ft)
    SELECT 600000 AS warehouse_size
),
prime_items AS (
    -- Step 2: Calculate the total size and count of prime items
    SELECT 
        COUNT(item_id) AS total_item_prime,
        SUM(item_size_sqft) AS total_prime_size
    FROM 
        Item
    WHERE 
        is_prime = true
),
available_space AS (
    -- Step 3: Calculate remaining space after allocating for prime items
    SELECT 
        ts.warehouse_size,
        FLOOR(ts.warehouse_size / pi.total_prime_size) AS total_prime_containers,
        (ts.warehouse_size - (FLOOR(ts.warehouse_size / pi.total_prime_size) * pi.total_prime_size)) AS remaining_space
    FROM 
        total_space ts
    JOIN 
        prime_items pi ON TRUE
),
non_prime_containers AS (
    -- Step 4: Determine the number of non-prime items that can fit
    SELECT 
        av.remaining_space,
        CASE 
            WHEN av.remaining_space >= 5500 THEN 
                -- Count one container of 15 non-prime items plus additional containers if space permits
                15 + (FLOOR((av.remaining_space - 5500) / 5500) * 15)
            ELSE 
                -- Minimum one container if there's enough space
                15 
        END AS total_item_non_prime
    FROM 
        available_space av
)
SELECT 
    'prime' AS item_type,
    FLOOR(warehouse_size / pi.total_prime_size) * pi.total_item_prime AS total_item_prime
FROM 
    available_space av
JOIN 
    prime_items pi ON TRUE
UNION ALL
SELECT 
    'non-prime' AS item_type,
    total_item_non_prime
FROM 
    non_prime_containers;

   
--10 Minimum Warehouse Size
WITH total_space AS (
    -- Step 1: Define the number of containers required
    SELECT 
        20 AS total_prime_containers,
        20 AS total_non_prime_containers
),
prime_items AS (
    -- Step 2: Calculate the total size and count of prime items
    SELECT 
        COUNT(item_id) AS total_item_prime,
        SUM(item_size_sqft) AS total_prime_size
    FROM 
        Item
    WHERE 
        is_prime = true
),
non_prime_items AS (
    -- Step 3: Calculate the total size and count of non-prime items
    SELECT 
        COUNT(item_id) AS total_item_non_prime,
        SUM(item_size_sqft) AS total_non_prime_size
    FROM 
        Item
    WHERE 
        is_prime = false
)
SELECT 
    (ts.total_prime_containers * pi.total_prime_size) + 
    (ts.total_non_prime_containers * npi.total_non_prime_size) AS minimum_warehouse_size
FROM 
    total_space ts
JOIN 
    prime_items pi ON TRUE
JOIN 
    non_prime_items npi ON TRUE;
   
--Inline  Calcualtion version:
SELECT 
    (20 * pi.total_prime_size) + 
    (20 * npi.total_non_prime_size) AS minimum_warehouse_size
FROM 
    (SELECT COUNT(item_id) AS total_item_prime, SUM(item_size_sqft) AS total_prime_size FROM Item WHERE is_prime = true) pi,
    (SELECT COUNT(item_id) AS total_item_non_prime, SUM(item_size_sqft) AS total_non_prime_size FROM Item WHERE is_prime = false) npi;

--Singgle query approach version:
SELECT 
    (20 * SUM(CASE WHEN is_prime = true THEN item_size_sqft END)) AS prime_space,
    (20 * SUM(CASE WHEN is_prime = false THEN item_size_sqft END)) AS non_prime_space,
    ((20 * SUM(CASE WHEN is_prime = true THEN item_size_sqft END)) + (20 * SUM(CASE WHEN is_prime = false THEN item_size_sqft END))) AS minimum_warehouse_size
FROM 
    Item;
